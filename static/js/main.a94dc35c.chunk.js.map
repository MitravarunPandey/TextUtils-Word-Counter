{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","id","href","title","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","onClick","toggleMode","htmlFor","TextForm","text","setText","useState","Fragment","style","color","heading","placeholder","value","onChange","event","target","backgroundColor","rows","UpperCase","newText","toUpperCase","showAlert","LowerCase","newText2","toLowerCase","CopyAllText","document","getElementById","select","execCommand","DeleteAllText","textarea","replace","speak","msg","SpeechSynthesisUtterance","voices","window","speechSynthesis","getVoices","voice","trim","match","length","split","defaultProps","about","name","Alert","alert","role","word","lower","charAt","slice","capitalize","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.a94dc35c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`} id=\"backgroundcolor\">\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            {/* <li className=\"nav-item active\">\r\n              <a className=\"nav-link\" href=\"/\">{props.name}</a>\r\n            </li> */}\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">{props.about}</a>\r\n            </li> */}\r\n          </ul>\r\n        </div>\r\n        \r\n        <div className={`form-check form-switch trext-${props.mode==='light'?`dark`:'light'}`}>\r\n          <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"  onClick={props.toggleMode}>Enable Dark Mode</label>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set Title Here\",\r\n  about: \"About Text Here\",\r\n  name: \"Home\"\r\n}\r\n","import React ,{useState} from 'react'\r\n\r\nexport default function TextForm\r\n(props) {\r\n    const UpperCase=()=>{\r\n    \r\nlet newText=text.toUpperCase();\r\nsetText(newText);\r\nprops.showAlert(\"Converted to Upper Case\",\"success\");\r\n    }\r\nconst LowerCase=()=>{\r\n\r\nlet newText2=text.toLowerCase();\r\nsetText(newText2);\r\nprops.showAlert(\"Converted to Lower Case\",\"success\");\r\n}\r\n\r\nconst CopyAllText = () => {\r\n  const textarea = document.getElementById('myBox');\r\n  textarea.select();\r\n  document.execCommand('copy');\r\n  props.showAlert(\"All Text Copied\",\"success\");\r\n};\r\nconst DeleteAllText = () => {\r\n  // const textarea = document.getElementById('myBox');\r\n  // textarea.select();\r\n  // document.execCommand('delete');\r\n  const textarea = text.replace(text,'');\r\n  setText(textarea);\r\n  \r\nprops.showAlert(\"Text Cleared\",\"success\");\r\n};\r\n    const HandleOnChange=(event)=>{\r\n          \r\n        setText(event.target.value)\r\n       }\r\n       \r\n       const speak = () => {\r\n        let msg = new SpeechSynthesisUtterance();\r\n        msg.text = text;\r\n        \r\n        // Get all available voices\r\n        let voices = window.speechSynthesis.getVoices();\r\n        \r\n        // Choose a voice (e.g., the second voice in the list)\r\n        msg.voice = voices[0]; // Change the index as needed\r\n        \r\n        // Speak the text\r\n        window.speechSynthesis.speak(msg);\r\n      }\r\n      \r\n    const[text,setText]=useState('');\r\n\r\n  return (\r\n    <>\r\n    <div className='container' style={ {color: props.mode==='dark'?'red':'black'}} >\r\n        <h1>{props.heading} </h1>\r\n<div className=\"form-group\">\r\n\r\n<textarea placeholder=\"Start typing, or copy and paste your document here..... \" className=\"form-control\" \r\nvalue= {text} onChange={HandleOnChange} style={ {backgroundColor: props.mode==='light'?'white':'#042743',color: props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n  </div> \r\n  <button type=\"button\" className=\"btn btn-primary mx-1\" onClick={UpperCase}>Covert To UpperCase</button>\r\n  <button type=\"button\" className=\"btn btn-primary mx-1\" onClick={LowerCase}>Covert To LowerCase</button>\r\n  <button type=\"button\" className=\"btn btn-primary mx-1\" onClick={CopyAllText}>Copy All Text </button>\r\n  <button type=\"button\" className=\"btn btn-primary mx-1\" onClick={DeleteAllText}>Reset </button>\r\n  <button type=\"submit\" onClick={speak} className=\"btn btn-warning mx-2 my-2\">Speak</button>\r\n</div>\r\n<div className=\"contain\" style={ {color: props.mode==='dark'?'red':'black'}}>\r\n  <h2>\r\n  Your Text Summary\r\n  </h2>\r\n  <p>\r\n  {text.trim() === '' ? \"No text entered\" : `${text.match(/\\S+/g).length} words and ${text.replace(/\\s+/g, '').length} characters`}\r\n</p>\r\n\r\n\r\n  <p style={ {color: props.mode==='dark'?'white':'black'}}>{ text.length>0? (0.08 * text.split(\" \").length):\"0.0\"} Minuts For Read</p>\r\n  <h2>Preview</h2>\r\n  <p style={ {color: props.mode==='dark'?'white':'black'}}>{text.length>0? text:\"Before Preview Enter Somethig Above in Text Area\"}</p>\r\n</div>\r\n</>\r\n  )\r\n}\r\n","import React  from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower =word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert &&\r\n<div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n\r\n</div>\r\n  )\r\n}\r\n\r\nexport default Alert","import React, { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      document.body.style.color = 'white';\n      showAlert(\"Dark Mode Has Been Enabled\", \"success\");\n      document.title = \"Text Util - Dark Mode\";\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black';\n      showAlert(\"Light Mode Has Been Enabled\", \"success\");\n      document.title = \"Text Util - Light Mode\";\n    }\n  };\n\n  return (\n    <>\n      <Navbar title=\"TextUtiles\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n        <TextForm showAlert={showAlert} heading=\"Enter Your Text For Analyze\" mode={mode} />\n        \n      </div>\n     \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}