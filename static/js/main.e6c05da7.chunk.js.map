{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","bgColor","setBgColor","useState","btnName","setBtnName","accordionOpen","setAccordionOpen","React","createElement","className","style","backgroundColor","color","border","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","onClick","handleAccordionToggle","concat","data-bs-parent","Navbar","props","mode","Link","to","title","data-toggle","data-target","aria-label","name","about","togleMode","htmlFor","TextForm","text","setText","Fragment","heading","placeholder","value","onChange","event","target","rows","UpperCase","newText","toUpperCase","showAlert","LowerCase","newText2","toLowerCase","CopyAllText","document","getElementById","select","execCommand","DeleteAllText","textarea","replace","speak","msg","SpeechSynthesisUtterance","voices","window","speechSynthesis","getVoices","voice","trim","match","length","split","defaultProps","Alert","alert","role","word","lower","charAt","slice","capitalize","App","setMode","setAlert","message","setTimeout","Router","toggleMode","body","Routes","Route","path","element","Navigate","exact","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.e6c05da7.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport default function About() {\r\n    const [bgColor, setBgColor] = useState(false);\r\n    const [btnName, setBtnName] = useState(false);\r\n    const [accordionOpen, setAccordionOpen] = useState(true); // State to track accordion open/close\r\n\r\n    const handleDarkMode = () => {\r\n        setBgColor(!bgColor);\r\n    };\r\n\r\n    const handleBtnToggle = () => {\r\n        setBtnName(!btnName);\r\n    };\r\n\r\n    const handleAccordionToggle = () => {\r\n        setAccordionOpen(!accordionOpen); // Toggle accordion open/close state\r\n    };\r\n\r\n    return (\r\n        <div className='container' style={{ backgroundColor: bgColor ? \"black\" : \"white\", color: bgColor ? \"white\" : \"black\", border: bgColor ? \"1px solid white\" : \"none\"}}>\r\n            <h1 className='my-3 text-center'>About Our Text Utils</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\">\r\n                        <button className=\"accordion-button\" \r\n                                style={{ backgroundColor: bgColor ? \"#0003ffb5\" : \"white\", color: bgColor ? \"white\" : \"black\", border: bgColor ? \"1px solid white\" : \"none\"}} \r\n                                type=\"button\" \r\n                                data-bs-toggle=\"collapse\" \r\n                                data-bs-target=\"#collapseOne\" \r\n                                aria-expanded={accordionOpen ? \"true\" : \"false\"} // Set aria-expanded based on accordion state\r\n                                aria-controls=\"collapseOne\"\r\n                                onClick={handleAccordionToggle}> \r\n                            {accordionOpen ? \"Open Accordion\" : \"Closed Accordion\"} {/* Render button text dynamically */}\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className={`accordion-collapse ${accordionOpen ? 'show' : ''}`} data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={{ backgroundColor: bgColor ? \"black\" : \"white\", color: bgColor ? \"white\" : \"black\", border: bgColor ? \"1px solid white\" : \"none\"}}>\r\n                        Our Text Util Word Counter is a versatile tool designed to streamline your text manipulation needs. With features like Convert to Uppercase and Convert to Lowercase, transforming text to your desired case is effortless. Whether you're formatting headings or normalizing input, these functions ensure consistency and clarity.\r\n\r\nThe Copy All Text feature simplifies sharing and editing by swiftly transferring your entire text content with a single click. No more tedious manual selection â€“ just copy and paste wherever needed.\r\n\r\nFor a clean slate, the Reset option clears the text area, offering a fresh canvas for your next task. It's perfect for starting anew or tidying up after completing a task.\r\n\r\nWith the Speak function, our tool goes beyond text display, giving a voice to your words. Whether you prefer auditory learning or need assistance with pronunciation, this feature is invaluable.\r\n\r\nAdditionally, our Text Util Word Counter offers a customizable interface with Dark Mode support, enhancing readability and reducing eye strain, especially in low-light environments. Toggle between light and dark themes effortlessly to suit your preferences and surroundings.\r\n\r\nWhether you're a student, professional, or casual user, our tool caters to your diverse text manipulation needs with efficiency and convenience. Experience the power of seamless text editing and formatting with our feature-rich Text Util Word Counter.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <br />\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom'; // Import Link from react-router-dom\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`} id=\"backgroundcolor\">\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> {/* Use Link instead of anchor tag */}\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item active\">\r\n              <Link className=\"nav-link\" to=\"/TextForm\">{props.name} </Link> \r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        \r\n        <div className={`form-check form-switch trext-${props.mode==='light'?`dark`:'light'}`}>\r\n          <input className=\"form-check-input\" type=\"checkbox\" onClick={props.togleMode} id=\"flexSwitchCheckDefault\"/>\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"  onClick={props.togleMode}>Enable Dark Mode</label>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set Title Here\",\r\n  about: \"About Text Here\",\r\n  name: \"Home\"\r\n}\r\n","import React ,{useState} from 'react'\r\n\r\nexport default function TextForm\r\n(props) {\r\n    const UpperCase=()=>{\r\n    \r\nlet newText=text.toUpperCase();\r\nsetText(newText);\r\nprops.showAlert(\"Converted to Upper Case\",\"success\");\r\n    }\r\nconst LowerCase=()=>{\r\n\r\nlet newText2=text.toLowerCase();\r\nsetText(newText2);\r\nprops.showAlert(\"Converted to Lower Case\",\"success\");\r\n}\r\n\r\nconst CopyAllText = () => {\r\n  const textarea = document.getElementById('myBox');\r\n  textarea.select();\r\n  document.execCommand('copy');\r\n  props.showAlert(\"All Text Copied\",\"success\");\r\n};\r\nconst DeleteAllText = () => {\r\n  // const textarea = document.getElementById('myBox');\r\n  // textarea.select();\r\n  // document.execCommand('delete');\r\n  const textarea = text.replace(text,'');\r\n  setText(textarea);\r\n  \r\nprops.showAlert(\"Text Cleared\",\"success\");\r\n};\r\n    const HandleOnChange=(event)=>{\r\n          \r\n        setText(event.target.value)\r\n       }\r\n       \r\n       const speak = () => {\r\n        let msg = new SpeechSynthesisUtterance();\r\n        msg.text = text;\r\n        \r\n        // Get all available voices\r\n        let voices = window.speechSynthesis.getVoices();\r\n        \r\n        // Choose a voice (e.g., the second voice in the list)\r\n        msg.voice = voices[0]; // Change the index as needed\r\n        \r\n        // Speak the text\r\n        window.speechSynthesis.speak(msg);\r\n      }\r\n      \r\n    const[text,setText]=useState('');\r\n\r\n  return (\r\n    <>\r\n    <div className='container' style={ {color: props.mode==='dark'?'red':'black'}} >\r\n        <h1>{props.heading} </h1>\r\n<div className=\"form-group\">\r\n\r\n<textarea placeholder=\"Start typing, or copy and paste your document here..... \" className=\"form-control\" \r\nvalue= {text} onChange={HandleOnChange} style={ {backgroundColor: props.mode==='light'?'white':'#042743',color: props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n  </div> \r\n  <button type=\"button\" className=\"btn btn-primary mx-1\" onClick={UpperCase}>Covert To UpperCase</button>\r\n  <button type=\"button\" className=\"btn btn-primary mx-1\" onClick={LowerCase}>Covert To LowerCase</button>\r\n  <button type=\"button\" className=\"btn btn-primary mx-1\" onClick={CopyAllText}>Copy All Text </button>\r\n  <button type=\"button\" className=\"btn btn-primary mx-1\" onClick={DeleteAllText}>Reset </button>\r\n  <button type=\"submit\" onClick={speak} className=\"btn btn-warning mx-2 my-2\">Speak</button>\r\n</div>\r\n<div className=\"contain\" style={ {color: props.mode==='dark'?'red':'black'}}>\r\n  <h2>\r\n  Your Text Summary\r\n  </h2>\r\n  <p>\r\n  {text.trim() === '' ? \"No text entered\" : `${text.match(/\\S+/g).length} words and ${text.replace(/\\s+/g, '').length} characters`}\r\n</p>\r\n\r\n\r\n  <p style={ {color: props.mode==='dark'?'white':'black'}}>{ text.length>0? (0.08 * text.split(\" \").length):\"0.0\"} Minuts For Read</p>\r\n  <h2>Preview</h2>\r\n  <p style={ {color: props.mode==='dark'?'white':'black'}}>{text.length>0? text:\"Before Preview Enter Somethig Above in Text Area\"}</p>\r\n</div>\r\n</>\r\n  )\r\n}\r\n","import React  from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower =word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert &&\r\n<div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n\r\n</div>\r\n  )\r\n}\r\n\r\nexport default Alert","import React, { useState } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Routes, Route,Navigate } from 'react-router-dom'; // corrected import\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      document.body.style.color = 'white';\n      showAlert(\"Dark Mode Has Been Enabled\", \"success\");\n      document.title = \"Text Util - Dark Mode\";\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black';\n      showAlert(\"Light Mode Has Been Enabled\", \"success\");\n      document.title = \"Text Util - Light Mode\";\n    }\n  };\n\n  return (\n    <>\n      <Router> {/* Wrap your routes with Router */}\n        <Navbar title=\"TextUtiles\" mode={mode} togleMode={toggleMode} />\n        <Alert alert={alert}/>\n        <div className=\"container my-3\">\n          <Routes> {/* Define your routes inside Routes */}\n          <Route path=\"/\" element={<Navigate to=\"/TextForm\" />} />\n            <Route exact path=\"/TextForm\" element={<TextForm showAlert={showAlert} heading=\"Enter Your Text For Analyze\" mode={mode} />} />\n            <Route  exact path=\"/about\" element={<About />} />\n          </Routes>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}